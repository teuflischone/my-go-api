// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/teuflischone/my-go-api/domain"

	request "github.com/teuflischone/my-go-api/transport/request"
)

// TodoUsecase is an autogenerated mock type for the TodoUsecase type
type TodoUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *TodoUsecase) Create(ctx context.Context, _a1 *request.CreateTodoReq) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.CreateTodoReq) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TodoUsecase) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *TodoUsecase) Fetch(ctx context.Context) ([]domain.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Todo
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TodoUsecase) GetByID(ctx context.Context, id int64) (domain.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Todo
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Todo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, _a2
func (_m *TodoUsecase) Update(ctx context.Context, id int64, _a2 *request.UpdateTodoReq) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *request.UpdateTodoReq) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTodoUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoUsecase creates a new instance of TodoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoUsecase(t mockConstructorTestingTNewTodoUsecase) *TodoUsecase {
	mock := &TodoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
